import os
import logging
from datetime import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
    JobQueue
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7805454643:AAGFtOlONGwUVzazxS5tqGGbLrmSzDBdu1k"
BOT_USERNAME = "@SafetyGuardProBot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SAFETY_QUIZ = [
    {
        "question": "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º?",
        "options": [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "–ù–∞–¥–µ—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã",
            "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã"
        ],
        "correct": 2,
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏ –Ω–∞–¥–µ—Ç—å –°–ò–ó."
    },
    {
        "question": "–ü—Ä–∏ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ —à—É–º–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏?",
        "options": [
            "–í—ã—à–µ 80 –¥–ë",
            "–í—ã—à–µ 85 –¥–ë", 
            "–í—ã—à–µ 90 –¥–ë"
        ],
        "correct": 1,
        "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —à—É–º–∞ –≤—ã—à–µ 85 –¥–µ—Ü–∏–±–µ–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã —Å–ª—É—Ö–∞."
    }
]

async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    await update.message.reply_html(
        rf"""üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SafetyGuardProBot!</b>

{user.mention_html()}, —è –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. 

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?""",
        reply_markup=main_menu_keyboard()
    )

def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üß† –¢–µ—Å—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data='start_quiz')],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –°–ò–ó", callback_data='set_reminder')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start_quiz':
        context.user_data['quiz_index'] = 0
        context.user_data['score'] = 0
        await send_question(update, context)
    elif query.data == 'set_reminder':
        await set_reminder(update, context)
    elif query.data == 'about':
        await about_project(update, context)
    elif query.data == 'support':
        await support(update, context)
    elif query.data.startswith('answer_'):
        await check_answer(update, context)

async def send_question(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    quiz_index = context.user_data.get('quiz_index', 0)
    
    if quiz_index < len(SAFETY_QUIZ):
        question = SAFETY_QUIZ[quiz_index]
        options = [
            InlineKeyboardButton(opt, callback_data=f'answer_{quiz_index}_{i}')
            for i, opt in enumerate(question["options"])
        ]
        reply_markup = InlineKeyboardMarkup([options])
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üìù <b>–í–æ–ø—Ä–æ—Å {quiz_index + 1}/{len(SAFETY_QUIZ)}</b>\n\n{question['question']}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        score = context.user_data.get('score', 0)
        message = (
            f"üèÜ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{len(SAFETY_QUIZ)}</b>\n\n"
        )
        
        if score == len(SAFETY_QUIZ):
            message += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        elif score >= len(SAFETY_QUIZ)/2:
            message += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
        else:
            message += "üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞."
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode='HTML',
            reply_markup=main_menu_keyboard()
        )

async def check_answer(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    _, quiz_index, answer_index = query.data.split('_')
    quiz_index = int(quiz_index)
    answer_index = int(answer_index)
    
    question = SAFETY_QUIZ[quiz_index]
    if answer_index == question["correct"]:
        context.user_data['score'] = context.user_data.get('score', 0) + 1
        await query.edit_message_text(
            text=f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n{question['explanation']}",
            parse_mode='HTML'
        )
    else:
        correct_answer = question["options"][question["correct"]]
        await query.edit_message_text(
            text=f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n{question['explanation']}",
            parse_mode='HTML'
        )
    
    context.user_data['quiz_index'] = quiz_index + 1
    await send_question(update, context)

async def set_reminder(update: Update, context: CallbackContext) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    job_queue = context.job_queue
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    current_jobs = job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    job_queue.run_daily(
        safety_reminder,
        time=time(hour=9, minute=0),
        days=tuple(range(7)),
        chat_id=chat_id,
        name=str(chat_id)
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9:00 —É—Ç—Ä–∞.",
        parse_mode='HTML',
        reply_markup=main_menu_keyboard()
    )

async def safety_reminder(context: CallbackContext) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    job = context.job
    reminder_text = (
        "‚è∞ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ—Ö –°–ò–ó\n"
        "3. –û—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π\n\n"
        "<i>–í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!</i>"
    )
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=reminder_text,
        parse_mode='HTML'
    )

async def about_project(update: Update, context: CallbackContext) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    about_text = (
        "üõ°Ô∏è <b>SafetyGuardProBot</b>\n\n"
        "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=about_text,
        parse_mode='HTML',
        reply_markup=main_menu_keyboard()
    )

async def support(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    support_text = (
        "üìû <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n"
        "–ö—É–∑–Ω–µ—Ü–æ–≤ –î–∞–Ω–∏–ª–∞ –†–æ—Å—Ç–∏—Å–ª–∞–≤–æ–≤–∏—á\n"
        "Telegram: @xateri\n\n"
        "–í–∞—à Chat ID: {update.effective_chat.id}"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=support_text,
        parse_mode='HTML',
        reply_markup=main_menu_keyboard()
    )

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", about_project))
    application.add_handler(CommandHandler("quiz", lambda u, c: button_handler(u, c, 'start_quiz')))
    application.add_handler(CommandHandler("reminder", lambda u, c: button_handler(u, c, 'set_reminder')))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == '__main__':
    main()